/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.kris.dialogflow.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.kris.dialogflow.model.ApiAiData;
import com.liferay.kris.dialogflow.model.ApiAiDataModel;
import com.liferay.kris.dialogflow.model.ApiAiDataSoap;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the ApiAiData service. Represents a row in the &quot;APIAI_ApiAiData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ApiAiDataModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApiAiDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ApiAiDataImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ApiAiDataModelImpl
	extends BaseModelImpl<ApiAiData> implements ApiAiDataModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a api ai data model instance should use the <code>ApiAiData</code> interface instead.
	 */
	public static final String TABLE_NAME = "APIAI_ApiAiData";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"apiAiDataId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"type_", Types.VARCHAR}, {"result", Types.VARCHAR},
		{"action", Types.VARCHAR}, {"fulfillment", Types.VARCHAR},
		{"speech", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("apiAiDataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("result", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("action", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fulfillment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("speech", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table APIAI_ApiAiData (uuid_ VARCHAR(75) null,apiAiDataId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,type_ VARCHAR(75) null,result VARCHAR(75) null,action VARCHAR(75) null,fulfillment VARCHAR(75) null,speech VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table APIAI_ApiAiData";

	public static final String ORDER_BY_JPQL =
		" ORDER BY apiAiData.apiAiDataId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY APIAI_ApiAiData.apiAiDataId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long USERID_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long APIAIDATAID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ApiAiData toModel(ApiAiDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ApiAiData model = new ApiAiDataImpl();

		model.setUuid(soapModel.getUuid());
		model.setApiAiDataId(soapModel.getApiAiDataId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setType(soapModel.getType());
		model.setResult(soapModel.getResult());
		model.setAction(soapModel.getAction());
		model.setFulfillment(soapModel.getFulfillment());
		model.setSpeech(soapModel.getSpeech());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ApiAiData> toModels(ApiAiDataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ApiAiData> models = new ArrayList<ApiAiData>(soapModels.length);

		for (ApiAiDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ApiAiDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _apiAiDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApiAiDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _apiAiDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ApiAiData.class;
	}

	@Override
	public String getModelClassName() {
		return ApiAiData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ApiAiData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ApiAiData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ApiAiData, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((ApiAiData)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ApiAiData, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ApiAiData, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ApiAiData)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ApiAiData, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ApiAiData, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ApiAiData>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ApiAiData.class.getClassLoader(), ApiAiData.class,
			ModelWrapper.class);

		try {
			Constructor<ApiAiData> constructor =
				(Constructor<ApiAiData>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ApiAiData, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ApiAiData, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ApiAiData, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ApiAiData, Object>>();
		Map<String, BiConsumer<ApiAiData, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ApiAiData, ?>>();

		attributeGetterFunctions.put("uuid", ApiAiData::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<ApiAiData, String>)ApiAiData::setUuid);
		attributeGetterFunctions.put("apiAiDataId", ApiAiData::getApiAiDataId);
		attributeSetterBiConsumers.put(
			"apiAiDataId",
			(BiConsumer<ApiAiData, Long>)ApiAiData::setApiAiDataId);
		attributeGetterFunctions.put("groupId", ApiAiData::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<ApiAiData, Long>)ApiAiData::setGroupId);
		attributeGetterFunctions.put("companyId", ApiAiData::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<ApiAiData, Long>)ApiAiData::setCompanyId);
		attributeGetterFunctions.put("userId", ApiAiData::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<ApiAiData, Long>)ApiAiData::setUserId);
		attributeGetterFunctions.put("userName", ApiAiData::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<ApiAiData, String>)ApiAiData::setUserName);
		attributeGetterFunctions.put("createDate", ApiAiData::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ApiAiData, Date>)ApiAiData::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ApiAiData::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ApiAiData, Date>)ApiAiData::setModifiedDate);
		attributeGetterFunctions.put("type", ApiAiData::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<ApiAiData, String>)ApiAiData::setType);
		attributeGetterFunctions.put("result", ApiAiData::getResult);
		attributeSetterBiConsumers.put(
			"result", (BiConsumer<ApiAiData, String>)ApiAiData::setResult);
		attributeGetterFunctions.put("action", ApiAiData::getAction);
		attributeSetterBiConsumers.put(
			"action", (BiConsumer<ApiAiData, String>)ApiAiData::setAction);
		attributeGetterFunctions.put("fulfillment", ApiAiData::getFulfillment);
		attributeSetterBiConsumers.put(
			"fulfillment",
			(BiConsumer<ApiAiData, String>)ApiAiData::setFulfillment);
		attributeGetterFunctions.put("speech", ApiAiData::getSpeech);
		attributeSetterBiConsumers.put(
			"speech", (BiConsumer<ApiAiData, String>)ApiAiData::setSpeech);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getApiAiDataId() {
		return _apiAiDataId;
	}

	@Override
	public void setApiAiDataId(long apiAiDataId) {
		_columnBitmask = -1L;

		_apiAiDataId = apiAiDataId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask |= CREATEDATE_COLUMN_BITMASK;

		if (_originalCreateDate == null) {
			_originalCreateDate = _createDate;
		}

		_createDate = createDate;
	}

	public Date getOriginalCreateDate() {
		return _originalCreateDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public String getResult() {
		if (_result == null) {
			return "";
		}
		else {
			return _result;
		}
	}

	@Override
	public void setResult(String result) {
		_result = result;
	}

	@JSON
	@Override
	public String getAction() {
		if (_action == null) {
			return "";
		}
		else {
			return _action;
		}
	}

	@Override
	public void setAction(String action) {
		_action = action;
	}

	@JSON
	@Override
	public String getFulfillment() {
		if (_fulfillment == null) {
			return "";
		}
		else {
			return _fulfillment;
		}
	}

	@Override
	public void setFulfillment(String fulfillment) {
		_fulfillment = fulfillment;
	}

	@JSON
	@Override
	public String getSpeech() {
		if (_speech == null) {
			return "";
		}
		else {
			return _speech;
		}
	}

	@Override
	public void setSpeech(String speech) {
		_speech = speech;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ApiAiData.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ApiAiData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ApiAiData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApiAiDataImpl apiAiDataImpl = new ApiAiDataImpl();

		apiAiDataImpl.setUuid(getUuid());
		apiAiDataImpl.setApiAiDataId(getApiAiDataId());
		apiAiDataImpl.setGroupId(getGroupId());
		apiAiDataImpl.setCompanyId(getCompanyId());
		apiAiDataImpl.setUserId(getUserId());
		apiAiDataImpl.setUserName(getUserName());
		apiAiDataImpl.setCreateDate(getCreateDate());
		apiAiDataImpl.setModifiedDate(getModifiedDate());
		apiAiDataImpl.setType(getType());
		apiAiDataImpl.setResult(getResult());
		apiAiDataImpl.setAction(getAction());
		apiAiDataImpl.setFulfillment(getFulfillment());
		apiAiDataImpl.setSpeech(getSpeech());

		apiAiDataImpl.resetOriginalValues();

		return apiAiDataImpl;
	}

	@Override
	public int compareTo(ApiAiData apiAiData) {
		int value = 0;

		if (getApiAiDataId() < apiAiData.getApiAiDataId()) {
			value = -1;
		}
		else if (getApiAiDataId() > apiAiData.getApiAiDataId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ApiAiData)) {
			return false;
		}

		ApiAiData apiAiData = (ApiAiData)obj;

		long primaryKey = apiAiData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ApiAiDataModelImpl apiAiDataModelImpl = this;

		apiAiDataModelImpl._originalUuid = apiAiDataModelImpl._uuid;

		apiAiDataModelImpl._originalGroupId = apiAiDataModelImpl._groupId;

		apiAiDataModelImpl._setOriginalGroupId = false;

		apiAiDataModelImpl._originalCompanyId = apiAiDataModelImpl._companyId;

		apiAiDataModelImpl._setOriginalCompanyId = false;

		apiAiDataModelImpl._originalUserId = apiAiDataModelImpl._userId;

		apiAiDataModelImpl._setOriginalUserId = false;

		apiAiDataModelImpl._originalCreateDate = apiAiDataModelImpl._createDate;

		apiAiDataModelImpl._setModifiedDate = false;

		apiAiDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ApiAiData> toCacheModel() {
		ApiAiDataCacheModel apiAiDataCacheModel = new ApiAiDataCacheModel();

		apiAiDataCacheModel.uuid = getUuid();

		String uuid = apiAiDataCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			apiAiDataCacheModel.uuid = null;
		}

		apiAiDataCacheModel.apiAiDataId = getApiAiDataId();

		apiAiDataCacheModel.groupId = getGroupId();

		apiAiDataCacheModel.companyId = getCompanyId();

		apiAiDataCacheModel.userId = getUserId();

		apiAiDataCacheModel.userName = getUserName();

		String userName = apiAiDataCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			apiAiDataCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			apiAiDataCacheModel.createDate = createDate.getTime();
		}
		else {
			apiAiDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			apiAiDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			apiAiDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		apiAiDataCacheModel.type = getType();

		String type = apiAiDataCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			apiAiDataCacheModel.type = null;
		}

		apiAiDataCacheModel.result = getResult();

		String result = apiAiDataCacheModel.result;

		if ((result != null) && (result.length() == 0)) {
			apiAiDataCacheModel.result = null;
		}

		apiAiDataCacheModel.action = getAction();

		String action = apiAiDataCacheModel.action;

		if ((action != null) && (action.length() == 0)) {
			apiAiDataCacheModel.action = null;
		}

		apiAiDataCacheModel.fulfillment = getFulfillment();

		String fulfillment = apiAiDataCacheModel.fulfillment;

		if ((fulfillment != null) && (fulfillment.length() == 0)) {
			apiAiDataCacheModel.fulfillment = null;
		}

		apiAiDataCacheModel.speech = getSpeech();

		String speech = apiAiDataCacheModel.speech;

		if ((speech != null) && (speech.length() == 0)) {
			apiAiDataCacheModel.speech = null;
		}

		return apiAiDataCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ApiAiData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ApiAiData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ApiAiData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ApiAiData)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ApiAiData, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ApiAiData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ApiAiData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ApiAiData)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, ApiAiData>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _apiAiDataId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _originalCreateDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _type;
	private String _result;
	private String _action;
	private String _fulfillment;
	private String _speech;
	private long _columnBitmask;
	private ApiAiData _escapedModel;

}